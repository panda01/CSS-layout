/*
 *
 * 	Sass Grid!
 * 	An Awesome simple grid with actual columns, that prioritizes minimal mark up!
 * 	Author: Khalah Jones-Golden<khasan222@gmail.com>
 *
 *
 */

@function calc_percent($divisor, $dividend) {
	@return $divisor / $dividend * 100%
}
@function calc_col_width_percent($gutter_width, $content_width) {
	$col_width: col_col_width_static($gutter_width, $content_width);
	$layout_content_width: $content_width + $gutter_width;
	@return calc_percent($col_width, $layout_content_width);
}
@function calc_responsive_gutter_width($gutter_width, $content_width) {
	@return calc_percent($gutter_width, ($gutter_width + $content_width));
}
@function col_col_width_static($size_key) {
	$content_width: map-get($responsive_content_width, $size_key);
	$gutter_width: map-get($responsive_gutter_width, $size_key);
	@return ($content_width - ($gutter_width * 11)) / 12;
}
@function should_have_width_override($loopbreakpoint, $fnbreakpoint) {
	@if $loopbreakpoint == $fnbreakpoint {
		@return false;
	}
	@if $fnbreakpoint == 'largetop' {
		@return false;
	}
	@if $fnbreakpoint == 'tablet' {
		@return false;
	}
	@return true;
}
// Remove these keys inorder to not support certain sizes
$responsive_breakpoint_keys: ('mobile', 'tablet', 'desktop', 'largetop');

// total width is simply (num_cols * col_width + num_cols * gutter_width)
// Need to make it so that way you just give it col width and gutter width and we're alright
$responsive_col_width: (
	'mobile': 		col_col_width_static('mobile'),
	'tablet': 		col_col_width_static('tablet'),
	'desktop': 		col_col_width_static('desktop'),
	'largetop': 	col_col_width_static('largetop')
);

$num_grid_columns: 12;

.container {
	box-sizing: border-box;
	width: 100%;
	.row {
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-start;
		align-items: center;
		align-content: space-around;
		position: relative;
	}
}
@mixin cols($breakpoint) {
	$breakpoint_container_margin: 		map-get($responsive_side_margins, $breakpoint);
	$gutter_width: 						map-get($responsive_gutter_width, $breakpoint);
	$col_width: 						map-get($responsive_col_width, $breakpoint);
	.container {
		@if type-of($breakpoint_container_margin) == string {
			width: $col_width * 12 + $gutter_width * 11;
			margin-left: $breakpoint_container_margin;
			margin-right: $breakpoint_container_margin;
		} @else {
			padding-left: $breakpoint_container_margin;
			padding-right: $breakpoint_container_margin;
		}

		.row {
			margin-left: $gutter_width * -0.5;
			margin-right: $gutter_width * -0.5;
			// margin-bottom: -$gutter_width;
			> {
				* {
					margin-left: $gutter_width / 2;
					margin-right: $gutter_width / 2;
				}
				.demo {
					min-height: 30vh;
					background-color: blue;
					margin-bottom: $gutter_width;
					display: flex;
					align-items: center;
					justify-content: center;
				}
				@each $margin_breakpoint_key in $responsive_breakpoint_keys {
					// This ensure the overlap works fine
					@if should_have_width_override($margin_breakpoint_key, $breakpoint) {
						[class*='col-#{$margin_breakpoint_key}-'] {
							margin-left: $gutter_width / 2;
							margin-right: $gutter_width / 2;
							@if unitless($gutter_width) {
								flex-basis: 100% - $gutter_width;
								max-width: 100% - $gutter_width;
							} @else {
								flex-basis: calc(100% - $gutter_width);
								max-width: calc(100% - $gutter_width);
							}
						}
					}
				}
				@for $col_num from 1 through $num_grid_columns {
					.order-#{$breakpoint}-#{$col_num} {
						order: $col_num - 6;
					}
					$calc_col_width: ($col_num * $col_width) + (($col_num - 1) * $gutter_width);
					.col-#{$breakpoint}-#{$col_num} {
						flex-basis: $calc_col_width;
						margin-left: $gutter_width / 2;
						margin-right: $gutter_width / 2;
						max-width: $calc_col_width;
					}
					.offset-#{$breakpoint}-#{$col_num} {
						margin-left: $calc_col_width + $gutter_width * 1.5 !important;
					}
				}
			}
		}
	}
	// TODO
	// Do we really need this?
	// and if we keep it, shouldn't it be display-mobile-none to keep with the format above?
	// Should there also be a display block, or flex?
	.display-none-#{$breakpoint} {
		display: none;
	}
}

@each $breakpoint in $responsive_breakpoints {
	$curr_breakpoint: map-get($responsive_breakpoints, $breakpoint);
	@if $breakpoint == 'desktop' {
		@media screen and (min-width: $curr_breakpoint) {
			@include cols($breakpoint);
		}
	} @else if $breakpoint == 'largetop' {
		@media screen and (min-width: $curr_breakpoint) {
			@include cols($breakpoint);
		}
	} @else if $breakpoint == 'mobile' {
		@media screen and (max-width: $curr_breakpoint) {
			@include cols($breakpoint);
		}
	} @else if $breakpoint == 'tablet' { // tablet
		$min_tablet: map-get($responsive_breakpoints, 'mobile') + 1;
		@media screen and (min-width: $min_tablet) and (max-width: $curr_breakpoint) {
			@include cols($breakpoint);
		}
	}
}
